"""
Django settings for djangorestapi project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =================================================================================================


def check_for_drafts():
    # create user specific config and ini
    try:
        fp = open(os.path.join(BASE_DIR, "config", "server.conf"), "r")
        fp.close()  # file found no action required
        return True
    except FileNotFoundError:

        try:
            venv = os.environ["VIRTUAL_ENV"]
        except KeyError:
            try:
                venv = os.environ["PYTHONPATH"]
            except KeyError:
                print("[x] Activate VIRTUAL_ENV or set correct PYTHONPATH")
                check = (os.path.join(BASE_DIR, "config", "server.conf"), os.path.join(BASE_DIR, "config", "uwsgi.ini"))
                for one in check:
                    if os.path.exists(one):
                        os.remove(one)
                return False

        # print server.config
        with open(os.path.join(BASE_DIR, "config", "ambiguous", "conf.draft"), "r") as fp_in:
            lines_in = fp_in.readlines()
        with open(os.path.join(BASE_DIR, "config", "server.conf"), "w") as fp_out:
            for line in lines_in:
                line = line.replace("<path>", str(BASE_DIR))
                fp_out.write(line)

        # print uwsgi.ini
        with open(os.path.join(BASE_DIR, "config", "ambiguous", "ini.draft"), "r") as fp_in:
            lines_in = fp_in.readlines()

        with open(os.path.join(BASE_DIR, "config", "uwsgi.ini"), "w") as fp_out:
            for line in lines_in:
                line = line.replace("<path>", str(BASE_DIR))
                line = line.replace("<venv>", venv)
                fp_out.write(line)
            return True


# =================================================================================================

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open(os.path.join(BASE_DIR, "config", "keys", "S_KEY.pk"), "r") as key_file:
    SECRET_KEY = key_file.read().strip()[1:-2]

# SECURITY WARNING: don't run with debug turned on in production!
with open(os.path.join(BASE_DIR, "config", "debug.txt"), "r") as key_file:
    DEBUG = key_file.read().strip()[1:-1]
    if DEBUG.lower() == "true":
        DEBUG = True
        from config.development.settings_extended import DATABASE_ROUTERS, DATABASES, ALLOWED_HOSTS
    else:
        DEBUG = False
        from config.production.settings_extended import DATABASE_ROUTERS, DATABASES, ALLOWED_HOSTS, HTTP_SECURED

        if HTTP_SECURED:
            # HTTPS settings
            SESSION_COOKIE_SECURE = True
            CSRF_COOKIE_SECURE = True
            SECURE_SSL_REDIRECT = True

            # HSTS settings
            SECURE_HSTS_SECONDS = 31536000  # 1y
            SECURE_HSTS_RELOAD = True
            SECURE_HSTS_INCLUDE_SUBDOMIANS = True

# ALLOWED_HOSTS in configFile
# Database in configFile
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# create user specific config and ini
if check_for_drafts():
    print("Config and ini checked")
else:
    exit(1)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "django_crontab",
    "drf_yasg",
    "auth_prime",
    "user_personal",
    "content_delivery",
    "analytics",
    "cronjobs",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "djangorestapi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "djangorestapi.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "Static"),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

DATA_UPLOAD_MAX_MEMORY_SIZE = 1048576 * 10  # 10MB

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    # -----------------
    "authorization",
    "uauth",
    "content-type",
    "Access-Control-Allow-Origin",
]

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "API Token eg [Bearer (Token JWT) ]": {"type": "apiKey", "name": "Authorization", "in": "header"},
        "User Token eg [Bearer (Token JWT) ]": {"type": "apiKey", "name": "uauth", "in": "header"},
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CRONTAB_LOCK_JOBS = True
CRONTAB_COMMAND_SUFFIX = "2>&1"  # log error
FILE = os.path.join(BASE_DIR, "log", "cronlog.log")
CRONJOBS = [
    # ('*/1 * * * *', 'cronjobs.cron.test', f'>> {FILE}'), # test module for cronjob
    ("0 */1 * * *", "cronjobs.cron.token_checker", f">> {FILE}"),  # token expiry checker
    ("*/1 * * * *", "cronjobs.cron.telegram_notification", f">> {FILE}"),  # notifications via TG
]
